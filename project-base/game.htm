<html>
<head>
    <title>GameBoard</title>
    <meta http-equiv="content-type" content="text/html; charset=windows-1252">

    <link type="text/css" href="style.css" rel="stylesheet"/>

    <script type="text/javascript" src="gl-matrix.js"></script>
    <script type="text/javascript" src="game-utils.js"></script>
    <script type="text/javascript" src="fbo.js"></script>
    <script type="text/javascript" src="background.js"></script>
    <script type="text/javascript" src="modelObj.js"></script>
    <script type="text/javascript" src="splat.js"></script>
    <script type="text/javascript" src="index.js"></script>

    <script id="background-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader ***
      layout(location=0) in vec3 aVertexPosition; // la position du sommet 
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture 

      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee

      void main(void) {
          // projection de la position
          gl_Position = vec4(aVertexPosition, 1.0);

          // stockage de la coordonnee de texture
          vTextureCoord = aVertexCoord;
      }







    </script>

    <script id="background-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant
      
      uniform vec2 uOffset;
      uniform float uAmplitude; // amplitude du bruit
      uniform float uFrequency; // frequence du bruit
      uniform float uPersistence; // persistence du bruit
      uniform sampler2D uTex;
      
    in vec2 vTextureCoord; // recuperation de la coord rasterisee
      out vec4 outColor;

      vec2 hash22(vec2 p) {
	  vec2 q = vec2(dot(p,vec2(127.1,311.7)), 
			dot(p,vec2(269.5,183.3)));
	  return fract(sin(q)*43758.5453123)*2.-1.;
      }

      float gnoise(in vec2 x) {
	  vec2 p = floor(x);
	  vec2 f = fract(x);
	  vec2 m = f*f*(3.-2.*f);
	  
	  return mix(
	      mix(dot(hash22(p+vec2(0.,0.)),f-vec2(0.,0.)),
		  dot(hash22(p+vec2(1.,0.)),f-vec2(1.,0.)),m.x),
	      mix(dot(hash22(p+vec2(0.,1.)),f-vec2(0.,1.)),
		  dot(hash22(p+vec2(1.,1.)),f-vec2(1.,1.)),m.x),m.y);
      }
      
      float fractalNoise(in vec2 p) {
       	  const int nb = 5; // nb octave
       	  float f = uFrequency; // frequency
       	  float a = uAmplitude; // amplitude
       	  float e = uPersistence; // persistence

       	  float n = 0.0;
       	  for(int i=0;i<nb;++i) {
              n = n + a*gnoise(p*f);
              f = 2.0*f;
              a = a*e;
       	  }
       	  return n;
      }

      float computeHeight(in vec2 p) {
	  // vous pouvez modifier cette fonction comme vous
	  // le souhaitez pour fabriquer votre propre background
	  return fractalNoise(p)*0.5+0.5;
      }

      vec3 computeNormal(in vec2 p) {
	  float scale = 70.0;
	  float xp = computeHeight(p+vec2( 0.001,0.0));
	  float xm = computeHeight(p+vec2(-0.001,0.0));
	  float yp = computeHeight(p+vec2(0.0, 0.001));
	  float ym = computeHeight(p+vec2(0.0,-0.001));
	  
	  float gx = 0.5*(xp-xm)*scale;
	  float gy = 0.5*(yp-ym)*scale;

	  vec3 v1 = normalize(vec3(1.0,0.0,gx));
	  vec3 v2 = normalize(vec3(0.0,1.0,gy));

	  return cross(v1,v2);
      }
      
       void main(void) {
      // d�calage avec la variable uOffset
      vec2 p = vTextureCoord*2.0-vec2(1.0)+uOffset;
      //Effet creux
      //p.x *= (vTextureCoord.y/10.+0.01);


      float d = computeHeight(p); // profondeur au point p
      vec3 n = computeNormal(p); // normale au point p

      // Chargement des textures
      outColor = texture(uTex,fract(p));

      // affichage de la profondeur
      //outColor = vec4(7./14.0,12.0*d,8.0*d,1.0);

      // affichage de la normale
      //outColor = vec4(n,1.0);
      }
      







    </script>

    <script id="model-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader *** 
      layout(location=0) in vec3 aVertexPosition;
      layout(location=1) in vec3 aVertexNormal;
      
      uniform mat4 uModelMatrix;
      uniform mat4 uViewMatrix;
      uniform mat4 uProjMatrix;
      
      out vec3 vNormal;

      void main(void) {
          // projection de la position
          gl_Position = uProjMatrix * uViewMatrix * uModelMatrix * vec4(aVertexPosition, 1.0);
          vNormal = mat3(inverse(transpose(uViewMatrix * uModelMatrix)))*normalize(aVertexNormal);
      }







    </script>

    <script id="model-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision mediump float; // precision des nombres flottant
      
    in vec3 vNormal;
      out vec4 outColor;

      void main(void) {
          // la couleur est attribuee au fragment courant
	  vec3 n = normalize(vNormal);

	  // pour le moment, on affiche juste la normale
          //outColor = vec4(n,1.);

      // Couleur du yoshi
	  vec3 l = vec3(0.,0.,1.);

	  // Produit scalaire
	  float diff = max(dot(n,l),0.1);

	  // RVB on met le vert en avant
	  outColor = vec4(diff,diff+9.,diff,1.);
      }







    </script>

    <script id="splat-vs" type="x-shader/x-vertex">#version 300 es
      // *** le vertex shader *** 
      layout(location=0) in vec3 aVertexPosition; // la position du sommet 
      layout(location=1) in vec2 aVertexCoord; // sa coordonnee de texture 
      
      uniform vec3 uPosition; // position du vaisseau
      out vec2 vTextureCoord; // on souhaite rasteriser la coordonnee
      
      void main(void) {
	  // projection de la position
	  gl_Position = vec4(aVertexPosition.xy+uPosition.xy,uPosition.z, 1.0);
	  
	  // stockage de la coordonnee de texture
	  vTextureCoord = aVertexCoord;
      }







    </script>

    <script id="splat-fs" type="x-shader/x-fragment">#version 300 es
      // *** le fragment shader ***
      precision highp float; // precision des nombres flottant

      uniform vec3 maCouleur;
      uniform sampler2D uTex;
      
    in vec2 vTextureCoord; // recuperation de la coord rasterisee
      out vec4 outColor;
      
      void main(void) {
	  float alpha = 1.-smoothstep(0.2,0.25,distance(vec2(.5),vTextureCoord));

	  // TEST: affichae d'un point avec la couleur donn�e en param�tre
	  //outColor = vec4(alpha*maCouleur,alpha);

	  // TEST: affichage d'une texture donn�e en param�tre
	  outColor = texture(uTex,vTextureCoord);
      }







    </script>

    <script type="text/javascript">

        const MAP_DIM_MIN = -0.95;
        const MAP_DIM_MAX = 0.95;

        let background;
        let character;
        let weapon;
        let bombs = [];
        let score = 0;

        function drawScene() {
            // initialisation du viewport
            gl.viewport(0, 0, gl.viewportWidth, gl.viewportHeight);

            // efface les buffers de couleur et de profondeur
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            // dessin du fond (d�commenter pour travailler dessus)
            gl.useProgram(background.shader());
            background.sendUniformVariables();
            background.draw();

            gl.useProgram(character.shader());
            character.translate = 0.5;

            gl.uniform2fv(gl.getUniformLocation(gl.createProgram(), "u_scale"), [0.5, 0.5]);
            character.sendUniformVariables();
            character.draw();


            // afficher un splat quand on appuie sur espace
            gl.enable(gl.BLEND); // transparence activ�e
            gl.useProgram(weapon.shader());
            weapon.sendUniformVariables();
            weapon.draw();

            if (bombs.length < 15) {
                // afficher les bombes (splat)
                let currentBomb;
                for (let bombId = 0; bombId < bombs.length; bombId++) {
                    currentBomb = bombs[bombId];
                    gl.enable(gl.BLEND); // transparence activ�e
                    gl.useProgram(currentBomb.shader());
                    currentBomb.sendUniformVariables();
                    currentBomb.draw();
                }
            } else {
                document.getElementById("scorefinal").innerText = "Votre score : " + score + " points";
                gameOver();
            }
            gl.disable(gl.BLEND); // transparence d�sactiv�e
        }

        // une bonne maniere de gerer les evenements claviers
        let currentlyPressedKeys = {};

        function handleKeyDown(event) {
            currentlyPressedKeys[event.keyCode] = true;
        }


        function handleKeyUp(event) {
            currentlyPressedKeys[event.keyCode] = false;
        }

        function handleKeys() {
            if (currentlyPressedKeys[68]) { // D
                character.move(0.8, 0);
            }

            if (currentlyPressedKeys[81]) { // Q
                character.move(-0.8, 0);
            }

            if (currentlyPressedKeys[90]) { // Z
                character.move(0, 0.5);
            }

            if (currentlyPressedKeys[83]) { // S
                character.move(0, -0.5);
            }

            if (currentlyPressedKeys[77]) { // M
                // supprimer l'arme (tir)
                weapon.clear();
            }

            if (currentlyPressedKeys[32]) { // SPACE
                // lancer une �toile
                let p = character.getBBox(); // boite englobante de character sur l'�cran
                let x = (p[0][0] + p[1][0]) / 2;
                let y = p[1][1];
                let z = p[1][2] + 0.005; // profondeur du splat (juste derri�re le vaisseau)

                weapon.position[0] = x;
                weapon.position[1] = y;
                weapon.position[2] = z;
            }

        }

        // animation
        let lastTime = 0;
        let lastTimeBomb = 0;
        let delayBombSpawn = 2000;
        let movement = 1; // right

        function animate() {
            // fonction appel�e � chaque frame, permet d'animer la sc�ne
            let timeNow = new Date().getTime();
            let destroyedBombs = [];

            // G�n�ration des bombes progressivement
            if ((timeNow - lastTimeBomb) > delayBombSpawn && bombs.length < 20) {
                let texBomb = initTexture('textures/bomb.png');
                let isSpecial = false;

                // Chance que la bombe se transforme en bombe sp�ciale
                if (Math.random() > 0.8) {
                    texBomb = initTexture('textures/specialbomb.png');
                    isSpecial = true;
                }

                let bomb = new Splat(texBomb);
                bomb.position[0] = MAP_DIM_MAX * randomDirection(); // Bombe coord horizontale
                bomb.position[1] = MAP_DIM_MAX; // Bombe coord verticale
                bomb.directionX = randomDirection();
                bomb.directionY = randomDirection();
                bomb.vitesse = Math.random() * 0.03;
                bomb.special = isSpecial;
                bomb.uniqid = timeNow;

                bombs.push(bomb);
                lastTimeBomb = timeNow;

                if (bombs.length < 5 && delayBombSpawn > 100) {
                    delayBombSpawn -= 100;
                }
            }

            if (bombs.length > 10) {
                //let texBck2 = initTexture('textures/stone-background.jpg');
                //background = new Background(texBck2);
            }

            if (lastTime !== 0) {
                // anime chacun des objets de la scene
                // si necessaire (en fonction du temps ecoul�)
                let elapsed = timeNow - lastTime;

                // Le personnage est d�bloqu� en bas de la map.
                character.position[1] = -4;

                character.setParameters(elapsed);
                background.setParameters(elapsed);
                weapon.setParameters(elapsed);

                // Pour chaque bombe, on m�j la position.
                for (let bombId = bombs.length - 1; bombId >= 0; bombId--) {

                    var currentBomb = bombs[bombId];
                    var newPosX = currentBomb.position[0] + currentBomb.directionX * currentBomb.vitesse;
                    var newPosY = currentBomb.position[1] + currentBomb.directionY * currentBomb.vitesse;


                    // Red�finition de la direction si x part en dehors du cadre
                    while (newPosX < MAP_DIM_MIN || newPosX > MAP_DIM_MAX) {
                        currentBomb.directionX = randomDirection();
                        newPosX = currentBomb.position[0] + currentBomb.directionX * currentBomb.vitesse;
                    }

                    // Red�finition de la direction si y part en dehors du cadre
                    while (newPosY < MAP_DIM_MIN || newPosY > MAP_DIM_MAX) {
                        currentBomb.directionY = randomDirection();
                        newPosY = currentBomb.position[1] + currentBomb.directionY * currentBomb.vitesse;
                    }

                    // Collision entre bombes
                    for (let otherBombId = 0; otherBombId < bombs.length; otherBombId++) {
                        // On compare notre bombe courante aux autres.
                        if (otherBombId !== bombId) {
                            let currentOtherBomb = bombs[otherBombId];
                            if (isCollision(currentBomb, currentOtherBomb)) {
                                currentOtherBomb.directionX = randomDirection();
                                currentOtherBomb.directionY = randomDirection();
                            }
                        }
                    }

                    // Collision entre l'�toile et les bombes
                    if (isCollision(currentBomb, weapon)) {
                        console.log("Collision avec �toile :(");
                        destroyedBombs.push(bombId);
                        console.log("[DESTROYED]: " + bombId);
                    } else {
                        currentBomb.position[0] = newPosX;
                        currentBomb.position[1] = newPosY;
                        currentBomb.setParameters(elapsed);
                    }
                }

                if (weapon.position[1] < MAP_DIM_MAX * 2) {
                    weapon.position[1] += 0.02;
                }
            }

            // On finalise par la suppression des bombes touch�es.
            for (let destroyedBombId = 0; destroyedBombId < destroyedBombs.length; destroyedBombId++) {
                score += (bombs[destroyedBombs[destroyedBombId]].special === true) ? 10 : 1;
                bombs.splice(destroyedBombs[destroyedBombId], 1);
                document.getElementById("score").innerText = "Score : "+score+" points";
            }

            lastTime = timeNow;
        }

        function tick() {
            requestAnimFrame(tick);
            handleKeys();
            drawScene();
            animate();
        }

        // G�n�ration d'une direction al�atoire pour x ou y.
        function randomDirection() {
            return (Math.random() * 2.0 - 1.0);
        }

        // Collision entre deux �l�ments
        function isCollision(obj1, obj2) {
            // obj1.position = [ 0 , 0 , 0 ]
            // obj2.position = [ 0 , 0 , 0 ]
            let rect1 = {x: obj1.position[0], y: obj1.position[1], width: obj1.width, height: obj1.height};
            let rect2 = {x: obj2.position[0], y: obj2.position[1], width: obj2.width, height: obj2.height};

            if (rect1.x < rect2.x + rect2.width &&
                rect1.x + rect1.width > rect2.x &&
                rect1.y < rect2.y + rect2.height &&
                rect1.height + rect1.y > rect2.y) {
                return true;
            }

            return false;
        }

        function webGLStart() {
            // initialisation du canvas et des objets OpenGL
            let canvas = document.getElementById("GameBoard");
            initGL(canvas);

            // test: cr�ation d'une texture
            let texStar = initTexture('textures/kirby-star.png');
            let texBck = initTexture('textures/background.jpg');

            initBackgroundShader();
            initModelShader();
            initSplatShader();

            background = new Background(texBck);
            character = new Model('models/yoshi/yoshi.obj');

            weapon = new Splat(texStar);
            weapon.position[1] = 1.2;

            /** for (let nb = 0; nb < 20; nb++) {
                let texBomb = initTexture('textures/bomb.png');
                let bomb = new Splat(texBomb);
                bomb.position[0] = MAP_DIM_MAX * randomDirection(); // Bombe coord horizontale
                bomb.position[1] = MAP_DIM_MAX; // Bombe coord verticale
                bomb.directionX = randomDirection();
                bomb.directionY = randomDirection();
                bomb.vitesse = Math.random() * 0.03;

                bombs.push(bomb);
            }*/

            // la couleur de fond sera grise fonc�e
            gl.clearColor(0.5, 0.5, 0.5, 0.9);

            // active le test de profondeur
            gl.enable(gl.DEPTH_TEST);

            // fonction de m�lange utilis�e pour la transparence
            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);

            /* Mouse and keyboard interaction functions */
            //canvas.addEventListener('mousedown', tbMouseDown, true);
            //canvas.addEventListener('mousemove', mouseMove, true);
            //canvas.addEventListener('mouseup', tbMouseUp, true);
            document.onkeydown = handleKeyDown;
            document.onkeyup = handleKeyUp;

            // dessine la scene
            tick();
        }

    </script>


</head>

<body>

<div id="debut">
    <h1>START ?</h1>
    <button onclick="start()">Go</button>
</div>
<div id="fin">
    <h1>GAME OVER</h1>
    <p id="scorefinal">Votre score : </p>
</div>
<div class="page" id="page">

    <div class="game">

        <canvas id="GameBoard"></canvas>

        <div id="panel">
            <table>
                <tr>
                    <td class="panel-info"></td>
                    <td class="panel-score" width="200" id="score"> SCORE : 0 point</td>
                </tr>
            </table>
        </div>

    </div>
</div>


</body>
</html>
